# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'cs144-25s-brandonle'
  GAR_LOCATION: 'us-central1'
  GKE_CLUSTER: 'bruinhottake-cluster'
  GKE_ZONE: 'us-central1-a'
  DEPLOYMENT_NAME: 'bruinhottake'
  REPOSITORY: 'bruinhottake'
  IMAGE: 'app'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/326959324526/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: 'github-actions@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 'Docker Auth'
        run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      - name: 'Build and push Backend'
        run: |-
          cd backend
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/backend:${GITHUB_SHA}"
          LATEST_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/backend:latest"
          docker build --tag "${DOCKER_TAG}" --tag "${LATEST_TAG}" .
          docker push "${DOCKER_TAG}"
          docker push "${LATEST_TAG}"

      - name: 'Build and push Frontend'
        run: |-
          cd frontend
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/frontend:${GITHUB_SHA}"
          LATEST_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/frontend:latest"
          docker build --tag "${DOCKER_TAG}" --tag "${LATEST_TAG}" .
          docker push "${DOCKER_TAG}"
          docker push "${LATEST_TAG}"

      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          tar -xzf kustomize.tar.gz
          chmod +x kustomize
          ./kustomize version

      - name: 'Deploy to GKE'
        run: |-
          cd k8s
          # Update backend image
          ../kustomize edit set image backend=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:$GITHUB_SHA
          ../kustomize build . | kubectl apply -f -
          kubectl rollout restart deployment backend -n ucla-forum
          kubectl rollout status deployment/backend -n ucla-forum

          # Update frontend image
          ../kustomize edit set image frontend=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:$GITHUB_SHA
          ../kustomize build . | kubectl apply -f -
          kubectl rollout restart deployment frontend -n ucla-forum
          kubectl rollout status deployment/frontend -n ucla-forum

          kubectl get services -o wide -n ucla-forum
